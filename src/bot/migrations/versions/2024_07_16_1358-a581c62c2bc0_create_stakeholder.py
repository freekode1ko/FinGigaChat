"""create_stakeholder

Revision ID: a581c62c2bc0
Revises: 48a5cebeea11
Create Date: 2024-07-16 13:58:29.314678

"""
import json
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

from db.models import Client, Stakeholder, StakeholderAlternative, RelationClientStakeholder

# revision identifiers, used by Alembic.
revision: str = 'a581c62c2bc0'
down_revision: Union[str, None] = '48a5cebeea11'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def insert_stakeholders(session: sa.orm.Session, data: dict[str, dict]) -> list[Stakeholder]:
    """
    Добавить стейкхолдеров в БД.

    :param session:  Сессия.
    :param data:     Словарь с данными по стейкхолдерам.
    :return:         Список из сохраненных стейкхолдеров.
    """
    stmt = (
        sa.insert(Stakeholder)
        .values([{'name': name, 'forbes_link': data[name]['forbes_link']} for name in data])
        .returning(Stakeholder)
    )
    stakeholders = session.scalars(stmt).all()
    return stakeholders


def insert_alt_stakeholders(session: sa.orm.Session, data: dict[str, dict], stakeholders: list[Stakeholder]):
    """
    Добавить альтернативные имена стейкхолдеров.

    :param session:         Сессия.
    :param data:            Словарь с данными по стейкхолдерам.
    :param stakeholders:    Список из сущностей Stakeholder, которые сохранены в БД.
    """
    values = [
        {'stakeholder_id': stakeholder.id, 'other_name': alt_name}
        for stakeholder in stakeholders
        for alt_name in set(data[stakeholder.name]['alternatives'] + [stakeholder.name])
    ]
    session.execute(sa.insert(StakeholderAlternative).values(values))


def make_relations(session: sa.orm.Session, data: dict[str, dict], stakeholders: list[Stakeholder]):
    """
    Добавить связи между стейкхолдерами и клиентами.

    :param session:        Сессия.
    :param data:           Словарь с данными по стейкхолдерам.
    :param stakeholders:   Список из сущностей Stakeholder, которые сохранены в БД.
    """
    values = []
    for stakeholder in stakeholders:
        clients_info = {_['name']: _['stakeholder_type'] for _ in data[stakeholder.name]['clients']}
        clients_ids = session.execute(sa.select(Client.id).filter(Client.name.in_(clients_info))).scalars().all()

        if len(clients_info) != len(clients_ids):
            raise Exception(f'У стейкхолдера {stakeholder.name} ошибка(и) в названии(ях) компании(й)')

        values.extend(
            {'stakeholder_id': stakeholder.id, 'client_id': client_id, 'stakeholder_type': stakeholder_type}
            for client_id, stakeholder_type in zip(clients_ids, clients_info.values())
        )

    session.execute(sa.insert(RelationClientStakeholder).values(values))


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('stakeholder',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False, comment='ФИО стейкхолдера'),
    sa.Column('forbes_link', sa.Text(), nullable=True, comment='Ссылка на био стейкхолдера'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    comment='Таблица с именами стейкхолдеров'
    )
    op.create_table('stakeholder_alternative',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('stakeholder_id', sa.Integer(), nullable=False, comment='id стейкхолдера'),
    sa.Column('other_name', sa.String(length=255), nullable=False, comment='Альтернативное ФИО стейкхолдера'),
    sa.ForeignKeyConstraint(['stakeholder_id'], ['stakeholder.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('other_name'),
    comment='Таблица с альтернативными именами стейкхолдеров'
    )
    op.create_table('relation_client_stakeholder',
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.Column('stakeholder_id', sa.Integer(), nullable=False),
    sa.Column('stakeholder_type', sa.Enum('lpr', 'beneficiary', name='stakeholdertype'), nullable=False, comment='Тип стейкхолдера'),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['stakeholder_id'], ['stakeholder.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('client_id', 'stakeholder_id'),
    comment='Таблица отношений стейкхолдеров к клиентам'
    )
    # ### end Alembic commands ###
    conn = op.get_bind()
    session = sa.orm.Session(bind=conn)

    with open('migrations/data/create_stakeholder/client_beneficiary_test.json', encoding='utf-8') as file:  # FIXME
        data = json.load(file)

    stakeholders = insert_stakeholders(session, data)
    insert_alt_stakeholders(session, data, stakeholders)
    make_relations(session, data, stakeholders)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('relation_client_stakeholder')
    op.drop_table('stakeholder_alternative')
    op.drop_table('stakeholder')
    sa.Enum('lpr', 'beneficiary', name='stakeholdertype').drop(op.get_bind())
    # ### end Alembic commands ###
