"""–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ü§°"""
import asyncio
import datetime
import time
import warnings
from contextlib import asynccontextmanager
from typing import Any, Callable

import pandas as pd
import uvicorn
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand, Update
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from fastapi import FastAPI, Request

from api.router import router as api_router
from configs import config, newsletter_config
from constants.commands import PUBLIC_COMMANDS
from db.database import async_session as async_session_maker, engine
from handlers import (
    admin,
    ai,
    analytics,
    call_reports,
    clients,
    commodity,
    common,
    news,
    products,
    quotes,
    referencebook,
    subscriptions,
    telegram_sections
)
from log.bot_logger import logger, user_logger
from log.sentry import init_sentry
from middlewares.db import DatabaseMiddleware
from middlewares.logger import LoggingMiddleware
from middlewares.state import StateMiddleware
from utils import newsletter, sessions
from utils.base import (
    check_relevance_features,
    next_weekday_time,
    wait_until
)

storage = MemoryStorage()
bot = Bot(token=config.api_token)
dp = Dispatcher(storage=storage)


async def passive_newsletter(
        newsletter_weekday: int,
        newsletter_hour: int,
        newsletter_minute: int,
        newsletter_executor: Callable,
        newsletter_info: str,
        apscheduler: AsyncIOScheduler,
        **kwargs: Any,
) -> None:
    """
    –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ newsletter_weekday –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –≤ newsletter_hour:newsletter_minute

    :param newsletter_weekday: –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ä–∞—Å—Å—ã–ª–∫—É 0-6 (0 - –ø–Ω, 6 - –≤—Å), -1 = –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    :param newsletter_hour: —á–∞—Å, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ä–∞—Å—Å—ã–ª–∫—É
    :param newsletter_minute: –º–∏–Ω—É—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ä–∞—Å—Å—ã–ª–∫—É
    :param newsletter_executor: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏
    :param newsletter_info: –ü–æ–¥–ø–∏—Å—å, –∫–∞–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è
    :param apscheduler: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç—á–µ—Ç–æ–≤ –ø–æ CIB Research
    :param kwargs: –¥–æ–ø –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    while True:
        now = datetime.datetime.now()
        next_newsletter_datetime = next_weekday_time(now, newsletter_weekday, newsletter_hour, newsletter_minute)
        newsletter_dt_str = next_newsletter_datetime.strftime(config.INVERT_DATETIME_FORMAT)
        await wait_until(next_newsletter_datetime)
        apscheduler.pause()
        logger.info(f'–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ {newsletter_dt_str} –ø–æ {newsletter_info}')

        start_tm = time.time()
        # –ø–æ–ª—É—á–∏–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ü–∏–∫–ª–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º–æ–∂–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è)
        user_df = pd.read_sql_query('SELECT user_id, username FROM registered_user', con=engine)

        kwargs['newsletter_start_datetime'] = next_newsletter_datetime
        await newsletter_executor(bot, user_df, **kwargs)

        work_time = time.time() - start_tm
        users_cnt = len(user_df)
        logger.info(
            f'–†–∞—Å—Å—ã–ª–∫–∞ –≤ {newsletter_dt_str} –¥–ª—è {users_cnt} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {work_time:.3f} —Å–µ–∫—É–Ω–¥. '
            f'–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏.'
        )
        apscheduler.resume()


async def set_bot_commands() -> None:
    """–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ –±–æ—Ç–µ"""
    commands = []

    for command in PUBLIC_COMMANDS:
        commands.append(BotCommand(command=f'/{command["command"]}', description=command['description']))

    await bot.delete_my_commands()
    await bot.set_my_commands(commands)


async def start_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    await set_bot_commands()

    # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    dp.include_routers(
        common.router,
        admin.router,
        quotes.router,
        subscriptions.router,
        ai.router,
        call_reports.router,
        referencebook.router,
        telegram_sections.router,
        analytics.router,
        products.router,
        clients.router,
        commodity.router,
        news.router,
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–¥–ª–≤–∞—Ä—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
    dp.update.middleware(DatabaseMiddleware(session_maker=async_session_maker))
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–¥–ª–≤–∞—Ä—é –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    dp.update.middleware(LoggingMiddleware(logger=logger, db_logger=user_logger))
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–¥–ª–≤–∞—Ä—é –¥–ª—è —Å–Ω—è—Ç–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ø—É—Å—Ç—è N –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dp.update.middleware(StateMiddleware())

    # –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –≤ –ø–µ—Ä–∏–æ–¥, –∫–æ–≥–¥–∞ –±–æ—Ç –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω
    await bot.set_webhook(config.WEBHOOK_URL)


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    init_sentry(dsn=config.SENTRY_CHAT_BOT_DSN)
    warnings.filterwarnings('ignore')

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ñ–∏—á–µ–π –≤ –∫–æ–¥–µ –∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ä–æ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å)
    await check_relevance_features()

    # –∑–∞–ø—É—Å–∫–∞–º —Ä–∞—Å—Å—ã–ª–∫–∏
    print('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞')
    loop = asyncio.get_event_loop()

    scheduler = AsyncIOScheduler()
    # –ö–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç (CIB_RESEARCH_NEWSLETTER_PARAMS) –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã CIB Research –≤ –±–∞–∑–µ,
    # –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã -> —Ä–∞—Å—Å—ã–ª–∫–∞
    scheduler.add_job(
        newsletter.send_new_researches_to_users,
        kwargs={'bot': bot},
        **newsletter_config.CIB_RESEARCH_NEWSLETTER_PARAMS,
    )
    scheduler.start()

    for passive_newsletter_params in newsletter_config.NEWSLETTER_CONFIG:
        executor = passive_newsletter_params['executor']
        newsletter_info = passive_newsletter_params['newsletter_info']

        for param in passive_newsletter_params['params']:
            send_time = param['send_time']
            send_time_dt = datetime.datetime.strptime(send_time, '%H:%M')

            loop.create_task(passive_newsletter(
                newsletter_weekday=param['weekday'],
                newsletter_hour=send_time_dt.hour,
                newsletter_minute=send_time_dt.minute,
                newsletter_executor=executor,
                newsletter_info=newsletter_info,
                apscheduler=scheduler,
                **param['kwargs'],
            ))
    await start_bot()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """FastApi lifespan"""
    await main()
    yield
    await sessions.GigaOauthClient().close()
    await sessions.GigaChatClient().close()
    await sessions.RagQaBankerClient().close()
    await sessions.RagStateSupportClient().close()
    await sessions.RagQaResearchClient().close()
    await sessions.RagWebClient().close()

app = FastAPI(lifespan=lifespan)
app.include_router(api_router, prefix="/api")


@app.post('/webhook')
async def bot_webhook(request: Request):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Telegram"""
    update = Update.model_validate_json(await request.body(), context={'bot': bot})
    await dp.feed_update(bot, update)

if __name__ == '__main__':
    try:
        uvicorn.run(app, host='0.0.0.0', port=config.PORT)
    except KeyboardInterrupt:
        print('bot was terminated')
