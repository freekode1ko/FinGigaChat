"""split alternative names into different rows
delete unused tables

Revision ID: 904899c37696
Revises: d37411e5cead
Create Date: 2024-05-14 15:47:56.621780

"""
from typing import Sequence, Union

from alembic import op
import pandas as pd
import sqlalchemy as sa


# revision identifiers, used by Alembic.
from models import models

revision: str = '904899c37696'
down_revision: Union[str, None] = 'd37411e5cead'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade_get_alternative_data(main_table_name: str, conn: sa.Connection) -> pd.DataFrame:
    return pd.read_sql(
        f"SELECT {main_table_name}_id, unnest(string_to_array(other_names, ';')) as other_name "
        f"FROM {main_table_name}_alternative",
        con=conn,
    )


def upgrade_refresh_alternative_names(table_orm: models.Base, data: pd.DataFrame, session: sa.orm.Session) -> None:
    session.execute(sa.delete(table_orm))
    session.execute(sa.insert(table_orm).values(data.to_dict('records')))


def downgrade_get_alternative_data(main_table_name: str, conn: sa.Connection) -> pd.DataFrame:
    return pd.read_sql(
        f"SELECT {main_table_name}_id, array_to_string(array_agg(other_name), ';') as other_names "
        f"FROM {main_table_name}_alternative "
        f"GROUP BY {main_table_name}_id",
        con=conn,
    )


def downgrade_refresh_alternative_names(table_name: str, data: pd.DataFrame, conn: sa.Connection) -> None:
    conn.execute(sa.text(f'DELETE FROM {table_name}'))
    data.to_sql(table_name, if_exists='append', con=conn, index=False)


def upgrade() -> None:
    conn = op.get_bind()
    session = sa.orm.Session(bind=conn)
    # delete unused tables
    conn.execute(sa.text('DROP TABLE IF EXISTS chat;'))
    conn.execute(sa.text('DROP TABLE IF EXISTS relation_client_message;'))
    conn.execute(sa.text('DROP TABLE IF EXISTS relation_commodity_message;'))

    client_alternative_data = upgrade_get_alternative_data('client', conn)
    commodity_alternative_data = upgrade_get_alternative_data('commodity', conn)
    industry_alternative_data = upgrade_get_alternative_data('industry', conn)
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('client_alternative', sa.Column('other_name', sa.Text(), nullable=True))
    op.drop_column('client_alternative', 'other_names')

    op.add_column('commodity_alternative', sa.Column('other_name', sa.Text(), nullable=True))
    op.drop_column('commodity_alternative', 'other_names')

    op.add_column('industry_alternative', sa.Column('other_name', sa.Text(), nullable=True))
    op.drop_column('industry_alternative', 'other_names')
    # ### end Alembic commands ###
    upgrade_refresh_alternative_names(models.ClientAlternative, client_alternative_data, session)
    upgrade_refresh_alternative_names(models.CommodityAlternative, commodity_alternative_data, session)
    upgrade_refresh_alternative_names(models.IndustryAlternative, industry_alternative_data, session)


def downgrade() -> None:
    conn = op.get_bind()
    session = sa.orm.Session(bind=conn)

    client_alternative_data = downgrade_get_alternative_data('client', conn)
    commodity_alternative_data = downgrade_get_alternative_data('commodity', conn)
    industry_alternative_data = downgrade_get_alternative_data('industry', conn)
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('industry_alternative', sa.Column('other_names', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_column('industry_alternative', 'other_name')

    op.add_column('commodity_alternative', sa.Column('other_names', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_column('commodity_alternative', 'other_name')

    op.add_column('client_alternative', sa.Column('other_names', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_column('client_alternative', 'other_name')

    op.create_table('chat',
    sa.Column('id', sa.Integer(), sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=2147483647,
                                              cycle=False, cache=1), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('type', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('relation_client_message',
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.Column('message_id', sa.Integer(), nullable=False),
    sa.Column('client_score', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('client_id', 'message_id')
    )
    op.create_table('relation_commodity_message',
    sa.Column('commodity_id', sa.Integer(), nullable=False),
    sa.Column('message_id', sa.Integer(), nullable=False),
    sa.Column('commodity_score', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['commodity_id'], ['commodity.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('commodity_id', 'message_id')
    )
    # ### end Alembic commands ###
    # Так как колонка other_names отсутствует, то обычная вставка выдаст ошибку
    downgrade_refresh_alternative_names('client_alternative', client_alternative_data, conn)
    downgrade_refresh_alternative_names('commodity_alternative', commodity_alternative_data, conn)
    downgrade_refresh_alternative_names('industry_alternative', industry_alternative_data, conn)
