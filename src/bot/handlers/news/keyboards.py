"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –º–µ–Ω—é –ù–æ–≤–æ—Å—Ç–∏.

–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–≥ –∫–∞–Ω–∞–ª–æ–≤.
–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–≥ —Ä–∞–∑–¥–µ–ª–æ–≤.
–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å—ã—Ä—å—è.
–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π.
"""
from typing import Any

import pandas as pd
from aiogram import types
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from constants import constants
from db import models
from handlers.news import callback_data_factories
from keyboards.base import get_pagination_kb


def get_menu_kb(telegram_groups: list[models.TelegramGroup]) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–∏–¥–∞:

    [ —Ç–µ–ª–µ–≥—Ä–∞–º –≥—Ä—É–ø–ø–∞ 1 ]
    [ ... ]
    [ —Ç–µ–ª–µ–≥—Ä–∞–º –≥—Ä—É–ø–ø–∞ N ]
    [ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ]
    [ –°—ã—Ä—å–µ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ]
    [ –ó–∞–≤–µ—Ä—à–∏—Ç—å ]

    :param telegram_groups: –°–ø–∏—Å–æ–∫ —Ç–≥ –≥—Ä—É–ø–ø
    """
    keyboard = InlineKeyboardBuilder()

    for telegram_group in telegram_groups:
        keyboard.row(types.InlineKeyboardButton(
            text=telegram_group.name,
            callback_data=callback_data_factories.TelegramGroupData(
                menu=callback_data_factories.NewsMenusEnum.choose_telegram_subjects,
                back_menu=callback_data_factories.NewsMenusEnum.main_menu,
                telegram_group_id=telegram_group.id,
            ).pack()
        ))

    for news_subject_group in callback_data_factories.NewsItems:
        keyboard.row(types.InlineKeyboardButton(
            text=news_subject_group.title,
            callback_data=callback_data_factories.SubjectData(
                menu=callback_data_factories.NewsMenusEnum.choose_subs_or_unsubs,
                back_menu=callback_data_factories.NewsMenusEnum.main_menu,
                subject=news_subject_group,
            ).pack()
        ))

    keyboard.row(types.InlineKeyboardButton(
        text=constants.END_BUTTON_TXT,
        callback_data=callback_data_factories.NewsMenuData(
            menu=callback_data_factories.NewsMenusEnum.end_menu,
        ).pack(),
    ))
    return keyboard.as_markup()


def get_sections_menu_kb(
        telegram_sections: list[models.TelegramSection],
        group_id: int,
) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–∏–¥–∞:

    [ section.name ]
    [ ... ]
    [ section.name ]
    [ –ù–∞–∑–∞–¥ ]
    [ –ó–∞–≤–µ—Ä—à–∏—Ç—å ]

    :param telegram_sections:   —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ –≥—Ä—É–ø–ø–µ (bot_telegram_section)
    :param group_id:            bot_telegram_group.id
    """
    keyboard = InlineKeyboardBuilder()

    for section in telegram_sections:
        keyboard.row(types.InlineKeyboardButton(
            text=section.name,
            callback_data=callback_data_factories.TelegramGroupData(
                menu=callback_data_factories.NewsMenusEnum.choose_source_group,
                telegram_group_id=group_id,
                telegram_section_id=section.id,
                back_menu=callback_data_factories.NewsMenusEnum.choose_telegram_subjects,
            ).pack(),
        ))

    keyboard.row(types.InlineKeyboardButton(
        text=constants.BACK_BUTTON_TXT,
        callback_data=callback_data_factories.NewsMenuData(
            menu=callback_data_factories.NewsMenusEnum.main_menu,
        ).pack(),
    ))
    keyboard.row(types.InlineKeyboardButton(
        text=constants.END_BUTTON_TXT,
        callback_data=callback_data_factories.NewsMenuData(
            menu=callback_data_factories.NewsMenusEnum.end_menu,
        ).pack(),
    ))
    return keyboard.as_markup()


def get_select_telegram_channels_kb(
        telegram_channels: pd.DataFrame,
        callback_data: callback_data_factories.TelegramGroupData,
) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–∏–¥–∞:

    [‚úÖ/üü©][ telegram_channel['name'] ]
    [‚úÖ/üü©][ ... ]
    [‚úÖ/üü©][ telegram_channel['name'] ]
    [ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ ]
    [ –ù–∞–∑–∞–¥ ]
    [ –ó–∞–≤–µ—Ä—à–∏—Ç—å ]

    :param telegram_channels:   –°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è (telegram_channel)
                              DataFrame[id, name, is_subscribed]
    :param callback_data:       –î–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –º–µ–Ω—é
    """
    keyboard = InlineKeyboardBuilder()

    for _, item in telegram_channels.iterrows():
        add_del_call = callback_data_factories.TelegramGroupData(
            menu=callback_data.menu,
            subject_ids=callback_data.subject_ids,
            telegram_group_id=callback_data.telegram_group_id,
            telegram_section_id=callback_data.telegram_section_id,
            telegram_channel_id=item['id'],
            back_menu=callback_data.back_menu,
        )

        mark = constants.SELECTED if item['is_subscribed'] else constants.UNSELECTED
        keyboard.row(types.InlineKeyboardButton(text=mark, callback_data=add_del_call.pack()))
        keyboard.add(types.InlineKeyboardButton(text=item['name'], callback_data=add_del_call.pack()))

    keyboard.row(types.InlineKeyboardButton(
        text='–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏',
        callback_data=callback_data_factories.TelegramGroupData(
            menu=callback_data_factories.NewsMenusEnum.choose_period_for_telegram,
            subject_ids=callback_data.subject_ids,
            telegram_group_id=callback_data.telegram_group_id,
            telegram_section_id=callback_data.telegram_section_id,
            back_menu=callback_data.menu,
        ).pack(),
    ))
    keyboard.row(types.InlineKeyboardButton(
        text=constants.BACK_BUTTON_TXT,
        callback_data=callback_data_factories.TelegramGroupData(
            menu=callback_data.back_menu,
            telegram_group_id=callback_data.telegram_group_id,
            telegram_section_id=callback_data.telegram_section_id,
            back_menu=callback_data.back_menu,
        ).pack(),
    ))
    keyboard.row(types.InlineKeyboardButton(
        text=constants.END_BUTTON_TXT,
        callback_data=callback_data_factories.NewsMenuData(
            menu=callback_data_factories.NewsMenusEnum.end_menu,
        ).pack(),
    ))
    return keyboard.as_markup()


def get_choose_source_kb(
        callback_data: callback_data_factories.TelegramGroupData,
) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–∏–¥–∞:

    [ –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã ]
    [ –í–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ ]
    [ –ù–∞–∑–∞–¥ ]
    [ –ó–∞–≤–µ—Ä—à–∏—Ç—å ]

    :param callback_data:       –î–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –º–µ–Ω—é
    """
    keyboard = InlineKeyboardBuilder()
    keyboard.row(types.InlineKeyboardButton(
        text='–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã',
        callback_data=callback_data_factories.TelegramGroupData(
            menu=callback_data_factories.NewsMenusEnum.telegram_channels_by_section,
            telegram_group_id=callback_data.telegram_group_id,
            telegram_section_id=callback_data.telegram_section_id,
            is_external=False,
            back_menu=callback_data.back_menu,
        ).pack(),
    ))
    keyboard.row(types.InlineKeyboardButton(
        text='–í–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏',
        callback_data=callback_data_factories.TelegramGroupData(
            menu=callback_data_factories.NewsMenusEnum.choose_period_for_telegram,
            telegram_group_id=callback_data.telegram_group_id,
            telegram_section_id=callback_data.telegram_section_id,
            is_external=True,
            back_menu=callback_data.back_menu,
        ).pack(),
    ))
    keyboard.row(types.InlineKeyboardButton(
        text=constants.BACK_BUTTON_TXT,
        callback_data=callback_data_factories.TelegramGroupData(
            menu=callback_data.back_menu,
            telegram_group_id=callback_data.telegram_group_id,
            telegram_section_id=callback_data.telegram_section_id,
            back_menu=callback_data.back_menu,
        ).pack(),
    ))
    keyboard.row(types.InlineKeyboardButton(
        text=constants.END_BUTTON_TXT,
        callback_data=callback_data_factories.NewsMenuData(
            menu=callback_data_factories.NewsMenusEnum.end_menu,
        ).pack(),
    ))
    return keyboard.as_markup()


def get_choose_subs_or_unsubs_kb(subject_data: callback_data_factories.NewsItems) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–∏–¥–∞:

    [ –í—ã–±—Ä–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞/—Å—ã—Ä—å–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ ]
    [ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞/—Å—ã—Ä—å–µ ]
    [ –ù–∞–∑–∞–¥ ]
    [ –ó–∞–≤–µ—Ä—à–∏—Ç—å ]
    """
    keyboard = InlineKeyboardBuilder()

    for button in subject_data.buttons:
        keyboard.row(types.InlineKeyboardButton(
            text=button['text'],
            callback_data=callback_data_factories.SubjectData(
                menu=callback_data_factories.NewsMenusEnum.subjects_list,
                subscribed=button['subscribed'],
                subject=subject_data.value,
                back_menu=callback_data_factories.NewsMenusEnum.choose_subs_or_unsubs,
            ).pack(),
        ))

    keyboard.row(types.InlineKeyboardButton(
        text=constants.BACK_BUTTON_TXT,
        callback_data=callback_data_factories.NewsMenuData(
            menu=callback_data_factories.NewsMenusEnum.main_menu,
        ).pack(),
    ))
    keyboard.row(types.InlineKeyboardButton(
        text=constants.END_BUTTON_TXT,
        callback_data=callback_data_factories.NewsMenuData(
            menu=callback_data_factories.NewsMenusEnum.end_menu,
        ).pack(),
    ))
    return keyboard.as_markup()


def get_subjects_list_kb(
        page_data: pd.DataFrame,
        current_page: int,
        max_pages: int,
        subscribed: bool,
        subject: callback_data_factories.NewsItems,
) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–∏–¥–∞:

    [ item 1 ]
    ...
    [ item N ]
    [<-][ –ù–∞–∑–∞–¥ ][->]
    [ –ó–∞–≤–µ—Ä—à–∏—Ç—å ]

    :param page_data:       DataFrame[id, name]
    :param current_page:    —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å
    :param max_pages:       –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ <- –∏ ->, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∫–æ–Ω—Ü–∞)
    :param subscribed:      —Ñ–ª–∞–≥, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –∫–ª–∏–µ–Ω—Ç –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–ª–∏ –Ω–µ—Ç
    :param subject:         –≥—Ä—É–ø–ø–∞ —Å—É–±—ä–µ–∫—Ç–æ–≤ (–∫–ª–∏–µ–Ω—Ç—ã –∏–ª–∏ —Å—ã—Ä—å–µ)
    """
    page_data['name'] = page_data['name'].str.capitalize()
    page_data['item_callback'] = page_data['id'].apply(
        lambda x: callback_data_factories.SubjectData(
            menu=callback_data_factories.NewsMenusEnum.choose_period_for_subject,
            subject_id=x,
            page=current_page,
            subscribed=subscribed,
            subject=subject,
            back_menu=callback_data_factories.NewsMenusEnum.subjects_list,
        ).pack()
    )
    return get_pagination_kb(
        page_data,
        current_page,
        max_pages,
        next_page_callback=callback_data_factories.SubjectData(
            menu=callback_data_factories.NewsMenusEnum.subjects_list,
            back_menu=callback_data_factories.NewsMenusEnum.choose_subs_or_unsubs,
            page=current_page + 1,
            subscribed=subscribed,
            subject=subject,
        ).pack(),
        prev_page_callback=callback_data_factories.SubjectData(
            menu=callback_data_factories.NewsMenusEnum.subjects_list,
            back_menu=callback_data_factories.NewsMenusEnum.choose_subs_or_unsubs,
            page=current_page - 1,
            subscribed=subscribed,
            subject=subject,
        ).pack(),
        back_callback=callback_data_factories.SubjectData(
            menu=callback_data_factories.NewsMenusEnum.choose_subs_or_unsubs,
            back_menu=callback_data_factories.NewsMenusEnum.main_menu,
            subject=subject,
        ).pack(),
        end_callback=callback_data_factories.NewsMenuData(
            menu=callback_data_factories.NewsMenusEnum.end_menu,
        ).pack(),
    )


def get_periods_kb(
        periods: list[dict[str, Any]],
        subject_interface: callback_data_factories.SubjectsInterfaces,
        selected_ids: str,
        back_menu: callback_data_factories.NewsMenuData,
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≥—Ä—É–∂–∞—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç—É

    :param periods:             list[dict[text: str, days: int]]
    :param subject_interface:   SubjectInterface –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–¥–∞—á–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥
    :param selected_ids:        id –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—É–±—ä–µ–∫—Ç–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
    :param back_menu:           callback_data_factories.NewsMenuData –ø—É–Ω–∫—Ç –º–µ–Ω—é, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    return:
    [ period.text ]
    ...
    [ –ù–∞–∑–∞–¥ ]
    [ –ó–∞–≤–µ—Ä—à–∏—Ç—å ]
    """
    keyboard = InlineKeyboardBuilder()

    for period in periods:
        keyboard.row(types.InlineKeyboardButton(
            text=period['text'],
            callback_data=callback_data_factories.NewsMenuData(
                menu=callback_data_factories.NewsMenusEnum.news_by_period,
                days_count=period['days'],
                interface=subject_interface,
                subject_ids=selected_ids,
            ).pack(),
        ))

    keyboard.row(types.InlineKeyboardButton(
        text=constants.BACK_BUTTON_TXT,
        callback_data=back_menu.pack(),
    ))
    keyboard.row(types.InlineKeyboardButton(
        text=constants.END_BUTTON_TXT,
        callback_data=callback_data_factories.NewsMenuData(
            menu=callback_data_factories.NewsMenusEnum.end_menu,
        ).pack(),
    ))
    return keyboard.as_markup()
