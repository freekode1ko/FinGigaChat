version: "3"


services:
    database:
        image: 'postgres:latest'
        env_file:
            - .env
        command: -p ${DB_PORT}
        ports:
            - ${DB_PORT}:${DB_PORT}
        container_name: fingigachatdb
        environment:
            - TZ=Europe/Moscow
            - POSTGRES_USER=${DB_USER}
            - POSTGRES_PASSWORD=${DB_PASS}
            - POSTGRES_DB=${DB_NAME}
        volumes:
            - ./db_files/db-data/:/var/lib/postgresql/data/
              #    - ./db_files/backup.sql:/docker-entrypoint-initdb.d/init.sql
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -p ${DB_PORT} -h 127.0.0.1"]
            start_period: 5s
            interval: 15s
            timeout: 3s
            retries: 2
        restart: always


    redis:
        image: "redis:latest"
        ports:
            - ${REDIS_PORT}:${REDIS_PORT}
        container_name: redis_container
        command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
        environment:
            - TZ=Europe/Moscow
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            - REDIS_PORT=${REDIS_PORT}
        volumes:
            - redis_data:/redis_data
        restart: always

    alembic:
        build:
            context: ./build/alembic
            additional_contexts:
                root_dir: ./
            dockerfile: Dockerfile
        env_file:
            - .env
        depends_on:
            database:
                condition: service_healthy
        command: alembic upgrade head
        container_name: alembic

    bot:
        build:
            context: ./src/projects/bot
            additional_contexts:
                root_dir: ./
            dockerfile: Dockerfile
        container_name: bot_container
        environment:
            - TZ=Europe/Moscow
        env_file:
            - .env
        ports:
            - ${PORT_BOT}:${PORT_BOT}
        command: bash -c "poetry run python main.py"
        depends_on:
            alembic:
                condition: service_completed_successfully
            redis:
                condition: service_started
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
            - ./sources:/code/sources/
        restart: always

    article:
        build:
            context: ./src/projects/article
            additional_contexts:
                root_dir: ./
            dockerfile: Dockerfile
        container_name: article_container
        environment:
            - TZ=Europe/Moscow
        env_file:
            - .env
        command: poetry run python main.py
        depends_on:
            - bot
            - bert_client_relevance
            - bert_commodity_relevance
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
            - ./sources:/code/sources/
        restart: always


    article_online:
        build:
            context: ./src/projects/article_online
            additional_contexts:
                root_dir: ./
            dockerfile: Dockerfile
        container_name: article_online_container
        environment:
            - TZ=Europe/Moscow
        env_file:
            - .env
        command: poetry run python main.py
        depends_on:
            - bot
            - bert_client_relevance
            - bert_commodity_relevance
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
            - ./sources:/code/sources/
        restart: always


    web-app:
        build:
            context: ./src/projects/web_app
            additional_contexts:
                root_dir: ./
            dockerfile: Dockerfile
        container_name: web_app_container
        environment:
            - TZ=Europe/Moscow
        env_file:
            - .env
        ports:
            - ${PORT_WEB_APP}:${PORT_WEB_APP}
        command: bash -c "poetry run uvicorn app:app --host 0.0.0.0 --port ${PORT_WEB_APP}"
        depends_on:
            - bot
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
            - ./sources:/code/sources
        restart: always


    bert_client_relevance:
        build:
            context: ./src/projects/bert_relevance
            additional_contexts:
                root_dir: ./
            dockerfile: Dockerfile
        container_name: bert_client_relevance_container
        environment:
            - TZ=Europe/Moscow
            - LOG_FILE=bert_client_relevance
            - MODEL_PATH=hellcatAI/ruRoberta_client_relevance_classification_quant
        env_file:
            - .env
        ports:
            - ${PORT_BERT_CLIENT_RELEVANCE}:${PORT_BERT_CLIENT_RELEVANCE}
        command: bash -c "poetry run uvicorn app:app --host 0.0.0.0 --port ${PORT_BERT_CLIENT_RELEVANCE}"
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
        restart: always


    bert_commodity_relevance:
        build:
            context: ./src/projects/bert_relevance
            additional_contexts:
                root_dir: ./
            dockerfile: Dockerfile
        container_name: bert_commodity_relevance_container
        environment:
            - TZ=Europe/Moscow
            - LOG_FILE=bert_commodity_relevance
            - MODEL_PATH=hellcatAI/ruRoberta_commodity_relevance_classification_quant
        env_file:
            - .env
        ports:
            - ${PORT_BERT_COMMODITY_RELEVANCE}:${PORT_BERT_COMMODITY_RELEVANCE}
        command: bash -c "poetry run uvicorn app:app --host 0.0.0.0 --port ${PORT_BERT_COMMODITY_RELEVANCE}"
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
        restart: always


    web_retriever:
        build:
            context: ./src/projects/web_retriever
            additional_contexts:
                root_dir: ./
            dockerfile: Dockerfile
        container_name: web_retriever_container
        environment:
            - TZ=Europe/Moscow
        env_file:
            - .env
        ports:
            - ${PORT_WEB_RETRIEVER}:${PORT_WEB_RETRIEVER}
        command: poetry run python main.py
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
        restart: always


    quotes:
        build:
            context: ./src/projects/quotes
            additional_contexts:
                root_dir: ./
            dockerfile: Dockerfile
        container_name: quotes_container
        environment:
            - TZ=Europe/Moscow
        env_file:
            - .env
        command: poetry run python main.py
        depends_on:
            - bot
            - selenium_firefox
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
            - ./sources:/code/sources/
            - /var/run/docker.sock:/var/run/docker.sock
        restart: always


    research:
        build:
            context: ./src/projects/research
            additional_contexts:
                root_dir: ./
            dockerfile: Dockerfile
        container_name: research_container
        environment:
            - TZ=Europe/Moscow
        env_file:
            - .env
        command: poetry run python main.py
        depends_on:
            - bot
            - selenium_firefox
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
            - ./sources:/code/sources/
        restart: always


    users_statistics:
        build:
            context: ./src/projects/users_statistics
            additional_contexts:
                root_dir: ./
            dockerfile: Dockerfile
        container_name: users_statistics_container
        environment:
            - TZ=Europe/Moscow
        env_file:
            - .env
        command: poetry run python main.py
        depends_on:
            - bot
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
            - ./sources:/code/sources/
        restart: always


    selenium_firefox:
        image: selenium/standalone-firefox:latest
        container_name: selenium_container
        shm_size: 2gb
        ports:
            - "4444:4444"
            - "7900:7900"
        environment:
            - HUB_HOST=hub
            - HUB_PORT=4444
            - NODE_MAX_INSTANCES=10
            - NODE_MAX_SESSION=10
            - SE_NODE_MAX_SESSIONS=10
            - JAVA_OPTS=-XX:ActiveProcessorCount=10
        restart: always


    parser_monitoring:
        build:
            context: ./src/projects/parser_monitoring
            additional_contexts:
                root_dir: ./
        container_name: parser_monitoring_container
        environment:
            - TZ=Europe/Moscow
        env_file:
            - .env
        command: poetry run python main.py
        depends_on:
            - database
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
            - ./sources:/code/sources/
        restart: always


    web-app-frontend:
        build:
            context: ./src/projects/web_app/react_frontend
            dockerfile: Dockerfile
        container_name: web_app_frontend
        volumes:
            - frontend_build:/code/dist
        depends_on:
            - web-app


    nginx:
        image: nginx:latest
        container_name: nginx
        ports:
          - "80:80"
          - "443:443"
        volumes:
          - frontend_build:/usr/share/nginx/html
          - ./build/nginx/template.conf:/tmp/base.template
          - ./data/certs:/certs:ro
        command: /bin/bash -c "envsubst < /tmp/base.template > /etc/nginx/nginx.conf && nginx -g 'daemon off;'"
        environment:
          - DOMAIN_NAME=${DOMAIN_NAME}
          - PORT_ARTICLE=${PORT_ARTICLE}
          - PORT_ARTICLE_ONLINE=${PORT_ARTICLE_ONLINE}
          - PORT_BOT=${PORT_BOT}
          - PORT_BERT_CLIENT_RELEVANCE=${PORT_BERT_CLIENT_RELEVANCE}
          - PORT_BERT_COMMODITY_RELEVANCE=${PORT_BERT_COMMODITY_RELEVANCE}
          - PORT_WEB_RETRIEVER=${PORT_WEB_RETRIEVER}
          - PORT_WEB_APP=${PORT_WEB_APP}
          - PORT_QUOTES=${PORT_QUOTES}
          - PORT_RESEARCH=${PORT_RESEARCH}
          - PORT_USERS_STATISTICS=${PORT_USERS_STATISTICS}
          - PORT_PARSER_MONITORING=${PORT_PARSER_MONITORING}
        depends_on:
            - article
            - article_online
            - bot
            - bert_client_relevance
            - bert_commodity_relevance
            - web-app
            - web-app-frontend
            - web_retriever
            - quotes
            - research
            - users_statistics
            - parser_monitoring

volumes:
  redis_data:
  frontend_build: