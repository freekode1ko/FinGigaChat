"""comments

Revision ID: 039896d53418
Revises: 3fa6db967f0c
Create Date: 2024-06-14 10:08:51.021040

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '039896d53418'
down_revision: Union[str, None] = '3fa6db967f0c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('article', 'link',
               existing_type=sa.TEXT(),
               comment='Ссылка на новость',
               existing_nullable=False)
    op.alter_column('article', 'date',
               existing_type=postgresql.TIMESTAMP(),
               comment='Дата и время публикации новости',
               existing_nullable=False)
    op.alter_column('article', 'text',
               existing_type=sa.TEXT(),
               comment='Исходный текст новости',
               existing_nullable=False)
    op.alter_column('article', 'title',
               existing_type=sa.TEXT(),
               comment='Заголовок новости (если заголовка не было, то его формирует гигачат)',
               existing_nullable=True)
    op.alter_column('article', 'text_sum',
               existing_type=sa.TEXT(),
               comment='Сформированная гигачатом сводка по новости',
               existing_nullable=True)
    op.alter_column('article_name_impact', 'article_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_constraint('article_name_impact_article_id_key', 'article_name_impact', type_='unique')
    op.alter_column('bonds', 'Изм,',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Text(),
               existing_nullable=True)
    op.create_table_comment(
        'bot_product',
        'Справочник продуктов (кредит, GM, ...)',
        existing_comment='Справочник категорий продуктов (кредит, GM, ...)',
        schema=None
    )
    op.alter_column('client', 'industry_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.drop_constraint('industry_id', 'client', type_='foreignkey')
    op.create_foreign_key(None, 'client', 'industry', ['industry_id'], ['id'], onupdate='CASCADE')
    op.alter_column('commodity', 'industry_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.drop_constraint('industry_id', 'commodity', type_='foreignkey')
    op.create_foreign_key(None, 'commodity', 'industry', ['industry_id'], ['id'], onupdate='CASCADE')
    op.add_column('financial_indicators', sa.Column('2019', sa.Float(precision=53), nullable=True))
    op.add_column('financial_indicators', sa.Column('2021E', sa.Float(precision=53), nullable=True))
    op.alter_column('financial_indicators', '2021',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('financial_indicators', '2023E',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_column('financial_indicators', '2023')
    op.drop_column('financial_indicators', '2026E')
    op.add_column('key_eco', sa.Column('2021', sa.Text(), nullable=True))
    op.add_column('key_eco', sa.Column('2023E', sa.Text(), nullable=True))
    op.drop_column('key_eco', '2023')
    op.drop_column('key_eco', '2025E')
    op.alter_column('research', 'is_new',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               comment='Указывает, что отчет еще не рассылался пользователям',
               existing_comment='Указывает, что новость еще не рассылалась пользователям',
               existing_server_default=sa.text('true'))
    op.alter_column('telegram_channel', 'name',
               existing_type=sa.VARCHAR(length=128),
               comment='Название телеграм канала',
               existing_nullable=False)
    op.alter_column('telegram_channel', 'link',
               existing_type=sa.VARCHAR(length=255),
               comment='Ссылка на телеграм канал',
               existing_nullable=False)
    op.alter_column('telegram_channel', 'section_id',
               existing_type=sa.INTEGER(),
               comment='Связь телеграм канала с разделом (например, отрасль "Недвижимость")',
               existing_nullable=False)
    op.drop_table_comment(
        'user_telegram_subscription',
        existing_comment='Справочник подписок пользователя на новостые telegram каналы',
        schema=None
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_comment(
        'user_telegram_subscription',
        'Справочник подписок пользователя на новостые telegram каналы',
        existing_comment=None,
        schema=None
    )
    op.alter_column('telegram_channel', 'section_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Связь телеграм канала с разделом (например, отрасль "Недвижимость")',
               existing_nullable=False)
    op.alter_column('telegram_channel', 'link',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Ссылка на телеграм канал',
               existing_nullable=False)
    op.alter_column('telegram_channel', 'name',
               existing_type=sa.VARCHAR(length=128),
               comment=None,
               existing_comment='Название телеграм канала',
               existing_nullable=False)
    op.alter_column('research', 'is_new',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               comment='Указывает, что новость еще не рассылалась пользователям',
               existing_comment='Указывает, что отчет еще не рассылался пользователям',
               existing_server_default=sa.text('true'))
    op.add_column('key_eco', sa.Column('2025E', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('key_eco', sa.Column('2023', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_column('key_eco', '2023E')
    op.drop_column('key_eco', '2021')
    op.add_column('financial_indicators', sa.Column('2026E', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('financial_indicators', sa.Column('2023', sa.TEXT(), autoincrement=False, nullable=True))
    op.alter_column('financial_indicators', '2023E',
               existing_type=sa.Text(),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.alter_column('financial_indicators', '2021',
               existing_type=sa.Text(),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.drop_column('financial_indicators', '2021E')
    op.drop_column('financial_indicators', '2019')
    op.drop_constraint(None, 'commodity', type_='foreignkey')
    op.create_foreign_key('industry_id', 'commodity', 'industry', ['industry_id'], ['id'])
    op.alter_column('commodity', 'industry_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=True)
    op.drop_constraint(None, 'client', type_='foreignkey')
    op.create_foreign_key('industry_id', 'client', 'industry', ['industry_id'], ['id'])
    op.alter_column('client', 'industry_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=True)
    op.create_table_comment(
        'bot_product',
        'Справочник категорий продуктов (кредит, GM, ...)',
        existing_comment='Справочник продуктов (кредит, GM, ...)',
        schema=None
    )
    op.alter_column('bonds', 'Изм,',
               existing_type=sa.Text(),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.create_unique_constraint('article_name_impact_article_id_key', 'article_name_impact', ['article_id'])
    op.alter_column('article_name_impact', 'article_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('article', 'text_sum',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Сформированная гигачатом сводка по новости',
               existing_nullable=True)
    op.alter_column('article', 'title',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Заголовок новости (если заголовка не было, то его формирует гигачат)',
               existing_nullable=True)
    op.alter_column('article', 'text',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Исходный текст новости',
               existing_nullable=False)
    op.alter_column('article', 'date',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Дата и время публикации новости',
               existing_nullable=False)
    op.alter_column('article', 'link',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Ссылка на новость',
               existing_nullable=False)
    # ### end Alembic commands ###
