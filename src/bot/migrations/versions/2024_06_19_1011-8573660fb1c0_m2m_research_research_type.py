"""m2m_research_research_type

Revision ID: 8573660fb1c0
Revises: 039896d53418
Create Date: 2024-06-14 10:11:44.850657

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import delete
from sqlalchemy.orm import sessionmaker

from db.models import ResearchResearchType, Research

# revision identifiers, used by Alembic.
revision: str = '8573660fb1c0'
down_revision: Union[str, None] = '039896d53418'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    bind = op.get_bind()
    Session = sessionmaker(bind=bind)
    session = Session()

    query = sa.text('SELECT research.id, research.report_id, research.research_type_id FROM research')
    all_reports = [dict(_) for _ in session.execute(query).mappings().fetchall()]

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('research_research_type',
    sa.Column('research_id', sa.BigInteger(), nullable=False),
    sa.Column('research_type_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['research_id'], ['research.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['research_type_id'], ['research_type.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('research_id', 'research_type_id'),
    comment='Cвязь мени ту мени типы ответов и сами отчеты'
    )
    op.drop_constraint('research_research_type_id_fkey', 'research', type_='foreignkey')
    op.drop_column('research', 'research_type_id')
    # ### end Alembic commands ###
    to_remove_ids: set[int] = set()
    uniq_reports: list[dict[str, int | str]] = []

    # Удалить полные дубли
    for report in all_reports:
        if len(same_reports := list(
                filter(lambda x: x['report_id'] == report['report_id'] and x['research_type_id'] == report['research_type_id'],
                       all_reports))) > 1:
            for i in same_reports[1:]:
                to_remove_ids.add(i['id'])

    # Удалить дубли по research_type_id
    for i in all_reports:
        if i['id'] in to_remove_ids:
            continue
        same_reports = list(filter(lambda x: i['report_id'] == x['report_id'], uniq_reports))
        if len(same_reports):
            to_remove_ids.add(i['id'])
            report = same_reports[0]
            i['id'] = report['id']
        else:
            uniq_reports.append(i)

    session.bulk_save_objects(
        [ResearchResearchType(research_id=x['id'], research_type_id=x['research_type_id']) for x in all_reports if
         x['id'] not in to_remove_ids])
    session.commit()

    session.execute(delete(Research).filter(Research.id.in_(to_remove_ids)))
    session.commit()


def downgrade() -> None:
    bind = op.get_bind()
    Session = sessionmaker(bind=bind)
    session = Session()

    query = sa.text(
        'SELECT * '
        'FROM research_research_type JOIN research ON research_research_type.research_id = research.id'
    )

    data = session.execute(query)
    data = data.mappings().fetchall()

    session.execute(sa.text('DELETE FROM research'))
    # session.commit()


    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('research', sa.Column('research_type_id', sa.BIGINT(), autoincrement=False, nullable=False))
    op.create_foreign_key('research_research_type_id_fkey', 'research', 'research_type', ['research_type_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_table('research_research_type')
    # ### end Alembic commands ###


    for report in data:
        query = sa.text(
            'insert into research (research_type_id, filepath, header, text, parse_datetime, publication_date, report_id, is_new)'
            'VALUES (:research_type_id, :filepath, :header, :text, :parse_datetime, :publication_date, :report_id , :is_new)'
        )
        to_insert = {
            'research_type_id': report['research_type_id'],
            'filepath': report['filepath'],
            'header': report['header'],
            'text': report['text'],
            'parse_datetime': report['parse_datetime'],
            'publication_date': report['publication_date'],
            'report_id': report['report_id'],
            'is_new': report['is_new'],
        }
        # print(rese)

        session.execute(query.bindparams(**to_insert))
        # session.commit()