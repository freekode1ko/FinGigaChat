"""create_role_model

Revision ID: 3121e35c7891
Revises: 0b2be2492b67
Create Date: 2024-09-02 14:13:34.419632

"""
from typing import Sequence, Union, Type

from alembic import op
import sqlalchemy as sa

from db.models import RegisteredUser, UserRole, BotFeature
from migrations.data.create_role_model.role_data import BOT_FEATURES_DATA, USERS_ROLES_DATA, ROLE_RIGHTS, ADMIN_CONTACTS

# revision identifiers, used by Alembic.
revision: str = '3121e35c7891'
down_revision: Union[str, None] = '0b2be2492b67'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def create_objs(
        session: sa.orm.Session,
        model: Type[BotFeature | UserRole],
        data: dict[str, str]
) -> list[BotFeature | UserRole]:
    """
    Создание, сохранение объектов.

    :param session: Сессия бд.
    :param model:   Модель.
    :param data:    Данные для создания экземпляров модели.
    :return:        Созданные модели.
    """
    objs = [model(name=name, description=desc) for name, desc in data.items()]
    session.add_all(objs)
    session.commit()
    return objs


def create_relations(session: sa.orm.Session, features: list[BotFeature], roles: list[UserRole]) -> None:
    """
    Создание и сохранение отношений между фичами и ролями.

    :param session:     Сессия бд.
    :param features:    Список из фичей в бд.
    :param roles:       Список из ролей в бд.
    """
    for role in roles:
        role.features = [feature for feature in features if feature.name in ROLE_RIGHTS[role.name]]
        session.add(role)
    session.commit()


def update_role_id(session: sa.orm.Session, roles: list[UserRole]) -> None:
    """
    Добавление ролей зарегистрированным пользователям.

    :param session: Сессия бд.
    :param roles:   Список из ролей в бд.
    """
    roles_dict = {role.name: role.id for role in roles}
    user_id = roles_dict['user']
    admin_id = roles_dict['admin']
    # назначаем всем роль user
    session.execute(sa.update(RegisteredUser).values(role_id=user_id))
    # изменяем нескольким роль на admin
    session.execute(
        sa.update(RegisteredUser)
        .where(RegisteredUser.user_email.in_(ADMIN_CONTACTS))
        .values(role_id=admin_id)
    )


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bot_feature',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Имя функционала/раздела'),
    sa.Column('description', sa.Text(), nullable=True, comment='Описание функционала, его составляющих'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    comment='Таблица с перечнем функционала в боте, мб как разделом, так и функцией'
    )
    op.create_table('user_role',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False, comment='Имя роли'),
    sa.Column('description', sa.Text(), nullable=True, comment='Описание роли'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    comment='Таблица описания пользовательских ролей'
    )
    op.create_table('relation_role_to_feature',
    sa.Column('user_role_id', sa.Integer(), nullable=False),
    sa.Column('bot_feature_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['bot_feature_id'], ['bot_feature.id'], ),
    sa.ForeignKeyConstraint(['user_role_id'], ['user_role.id'], ),
    sa.PrimaryKeyConstraint('user_role_id', 'bot_feature_id'),
    comment='Таблица отношений между ролью пользователя и доступным ему функционалом'
    )
    op.add_column('registered_user', sa.Column('role_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'registered_user', 'user_role', ['role_id'], ['id'], onupdate='CASCADE', ondelete='RESTRICT')
    # ### end Alembic commands ###
    conn = op.get_bind()
    session = sa.orm.Session(bind=conn)

    features = create_objs(session, BotFeature, BOT_FEATURES_DATA)
    roles = create_objs(session, UserRole, USERS_ROLES_DATA)
    create_relations(session, features, roles)
    update_role_id(session, roles)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('registered_user_role_id_fkey', 'registered_user', type_='foreignkey')
    op.drop_column('registered_user', 'role_id')
    op.drop_table('relation_role_to_feature')
    op.drop_table('user_role')
    op.drop_table('bot_feature')
    # ### end Alembic commands ###
