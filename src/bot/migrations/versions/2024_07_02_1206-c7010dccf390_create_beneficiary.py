"""create beneficiary

Revision ID: c7010dccf390
Revises: 48a5cebeea11
Create Date: 2024-07-02 12:06:44.027469

"""
import json
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

from db.models import Beneficiary, BeneficiaryAlternative, Client, RelationClientBeneficiary


# revision identifiers, used by Alembic.
revision: str = 'c7010dccf390'
down_revision: Union[str, None] = '48a5cebeea11'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def insert_beneficiaries_name(session: sa.orm.Session, data: dict[str, dict]) -> list[Beneficiary]:
    """
    Добавить бенефициаров в БД.

    :param session:  Сессия.
    :param data:     Словарь с данными по бенефициарам, их альтернативным именам и их клиентам.
    :return:         Список из сохраненных бенефициаров.
    """
    stmt = sa.insert(Beneficiary).values([{'name': name} for name in data.keys()]).returning(Beneficiary)
    beneficiaries = session.execute(stmt).scalars().all()
    return beneficiaries


def insert_alt_beneficiaries(session: sa.orm.Session, data: dict[str, dict], beneficiaries: list[Beneficiary]):
    """
    Добавить альтернативные имена бенефициарам.

    :param session:         Сессия.
    :param data:            Словарь с данными по бенефициарам, их альтернативным именам и их клиентам.
    :param beneficiaries:   Список из сущностей Beneficiary, которые сохранены в БД.
    """
    values = [
        {'beneficiary_id': beneficiary.id, 'other_name': alt_name}
        for beneficiary in beneficiaries
        for alt_name in set(data[beneficiary.name]['alternatives'] + [beneficiary.name])
    ]
    session.execute(sa.insert(BeneficiaryAlternative).values(values))


def make_relations(session: sa.orm.Session, data: dict[str, dict], beneficiaries: list[Beneficiary]):
    """
    Добавить связи между бенефициарами и клиентами.

    :param session:         Сессия.
    :param data:            Словарь с данными по бенефициарам, их альтернативным именам и их клиентам.
    :param beneficiaries:   Список из сущностей Beneficiary, которые сохранены в БД.
    """
    values = []
    for beneficiary in beneficiaries:
        clients = data[beneficiary.name]['clients']
        clients_ids = session.execute(sa.select(Client.id).filter(Client.name.in_(clients))).scalars().all()
        if len(clients) != len(clients_ids):
            raise Exception(f'У бенефициара {beneficiary.name} ошибка(и) в названии(ях) компании(й)')
        values.extend({'beneficiary_id': beneficiary.id, 'client_id': client_id} for client_id in clients_ids)
    session.execute(sa.insert(RelationClientBeneficiary).values(values))


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('beneficiary',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False, comment='ФИО бенефициара'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    comment='Таблица с именами бенефициаров'
    )
    op.create_table('beneficiary_alternative',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('beneficiary_id', sa.Integer(), nullable=False, comment='id бенефициара'),
    sa.Column('other_name', sa.String(length=255), nullable=False, comment='альтернативное ФИО бенефициара'),
    sa.ForeignKeyConstraint(['beneficiary_id'], ['beneficiary.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('other_name'),
    comment='Таблица с альтернативными именами бенефициаров'
    )
    op.create_table('relation_client_beneficiary',
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.Column('beneficiary_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['beneficiary_id'], ['beneficiary.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('client_id', 'beneficiary_id'),
    comment='Таблица отношений бенефициаров к клиентам'
    )
    # ### end Alembic commands ###
    conn = op.get_bind()
    session = sa.orm.Session(bind=conn)

    with open('migrations/data/create_beneficiary/client_beneficiary.json', encoding='utf-8') as file:
        data = json.load(file)

    beneficiaries = insert_beneficiaries_name(session, data)
    insert_alt_beneficiaries(session, data, beneficiaries)
    make_relations(session, data, beneficiaries)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('relation_client_beneficiary')
    op.drop_table('beneficiary_alternative')
    op.drop_table('beneficiary')
    # ### end Alembic commands ###
