"""rag_classification

Revision ID: 5dcc599d5ffb
Revises: 7c3b2d9e1235
Create Date: 2025-03-13 12:33:33.867742

"""
import json
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

from models.models import RAGClassificationCategory, RAGClassificationCategoryQuestionExample

# revision identifiers, used by Alembic.
revision: str = '5dcc599d5ffb'
down_revision: Union[str, None] = '7c3b2d9e1235'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


CATEGORIES_DATA_PATH = 'migrations/data/rag_classification/categories.json'
CATEGORY_TO_QUESTION_DATA_PATH = 'migrations/data/rag_classification/question_to_category.json'


def add_data_to_rag_classification_category(session: sa.orm.Session) -> list[RAGClassificationCategory]:
    """Добавление данных о категориях в таблицу RAGClassificationCategory."""
    with open(CATEGORIES_DATA_PATH, encoding='utf-8') as file:
        categories_data = json.load(file)

    categories_objs = [
        RAGClassificationCategory(
            name=category['category'],
            description=category['description'],
            key_words=category['key_words']
        )
        for category in categories_data
    ]
    session.add_all(categories_objs)
    session.commit()
    return categories_objs


def add_data_to_rag_classification_category_question_example(
        session: sa.orm.Session,
        categories: list[RAGClassificationCategory]
):
    """Добавление данных о категориях в таблицу RAGClassificationCategory."""
    with open(CATEGORY_TO_QUESTION_DATA_PATH, encoding='utf-8') as file:
        category_to_question_data = json.load(file)
        category_to_question_data = [dict(t) for t in {tuple(item.items()) for item in category_to_question_data}]

    category_map = {category.name: category.id for category in categories}
    categories_questions_objs = [
        RAGClassificationCategoryQuestionExample(
            category_id=category_map[cq['category']],
            question=cq['question']
        )
        for cq in category_to_question_data
    ]
    session.add_all(set(categories_questions_objs))
    session.commit()


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('rag_classification_category',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=256), nullable=False, comment='Имя категории'),
    sa.Column('description', sa.Text(), nullable=True, comment='Описание категории, используется в системном промпте классификатора'),
    sa.Column('key_words', sa.Text(), nullable=True, comment='Ключевые слова, которые используются в вопросах этой категории'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    comment='Таблица для RAG с перечнем категорий, к которым относятся пользовательские вопросы'
    )
    op.create_table('rag_classification_category_question_example',
    sa.Column('category_id', sa.Integer(), nullable=False, comment='Категория'),
    sa.Column('question', sa.Text(), nullable=False, comment='Вопрос в RAG'),
    sa.ForeignKeyConstraint(['category_id'], ['rag_classification_category.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('category_id', 'question'),
    comment='Таблица для RAG с примерами категорий и относящихся к ним вопросам'
    )
    # ### end Alembic commands ###
    conn = op.get_bind()
    session = sa.orm.Session(bind=conn)
    categories = add_data_to_rag_classification_category(session)
    add_data_to_rag_classification_category_question_example(session, categories)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('rag_classification_category_question_example')
    op.drop_table('rag_classification_category')
    # ### end Alembic commands ###
