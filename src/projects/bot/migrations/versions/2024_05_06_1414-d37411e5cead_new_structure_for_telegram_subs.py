"""new_structure_for_telegram_subs

Revision ID: d37411e5cead
Revises: 50aa3408b432
Create Date: 2024-05-06 14:14:19.691450

"""
from typing import Sequence, Union, Any

from alembic import op
import sqlalchemy as sa

from db import models
from migrations.data.new_structure_for_telegram_subs import bot_telegram_group, bot_telegram_section, telegram_channel


# revision identifiers, used by Alembic.
revision: str = 'd37411e5cead'
down_revision: Union[str, None] = '50aa3408b432'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade_get_telegram_channels(conn: sa.Connection) -> list[dict[str, Any]]:
    query = sa.text('SELECT id, name, industry_id FROM telegram_channel')
    data = conn.execute(query).fetchall()
    return [{
        'id': i[0],
        'name': i[1],
        'industry_id': i[2],
    } for i in data]


def upgrade_add_new_telegram_sections(session: sa.orm.Session) -> None:
    session.execute(sa.insert(models.TelegramSection).values(bot_telegram_section.data))


def upgrade_old_telegram_channels(session: sa.orm.Session, telegram_data: list[dict[str, Any]]) -> None:
    """Добавляет отраслевые разделы, обновляет section_id у старых тг каналов"""
    industries = session.execute(sa.select(models.Industry.id, models.Industry.name, models.Industry.display_order)).fetchall()
    section_industries = [{
        'name': i[1].capitalize(),
        'display_order': i[2],
        'group_id': sa.select(models.TelegramGroup.id).where(
            models.TelegramGroup.name == bot_telegram_group.data[2]['name'],
        ).limit(1),
    } for i in industries]
    industries: dict[int, str] = {i[0]: i[1].lower() for i in industries}

    # Вставка отраслей в качестве разделов
    section_data = session.execute(
        sa.insert(
            models.TelegramSection
        ).values(
            section_industries
        ).returning(models.TelegramSection.id, models.TelegramSection.name)
    ).fetchall()
    section_data: dict[str, int] = {i[1].lower(): i[0] for i in section_data}

    # Обновление section_id у старых тг каналов
    for i in telegram_data:
        if not (foreign_id := section_data.get(industries[i['industry_id']])):
            continue
        telegram_ch = {
            'section_id': foreign_id,
        }

        session.execute(sa.update(models.TelegramChannel).values(**telegram_ch).where(models.TelegramChannel.id == i['id']))


def upgrade_add_new_telegram_channels(session: sa.orm.Session) -> None:
    session.execute(sa.insert(models.TelegramChannel).values(telegram_channel.data))


def downgrade_get_telegram_channels(conn: sa.Connection) -> list[dict[str, Any]]:
    query = sa.text('SELECT t.id, t.name, t.section_id, s.name as section_name '
                    'FROM telegram_channel t '
                    'JOIN bot_telegram_section s ON t.section_id = s.id')
    data = conn.execute(query).fetchall()
    return [{
        'id': i[0],
        'name': i[1],
        'section_id': i[2],
        'section_name': i[3],
    } for i in data]


def downgrade_update_telegram_channel(
        conn: sa.Connection,
        session: sa.orm.Session,
        telegram_channels: list[dict[str, Any]],
) -> None:
    """обновляет industry_id у старых тг каналов, удаляет новые тг каналы"""
    industries = session.execute(sa.select(models.Industry.id, models.Industry.name)).fetchall()
    industries: dict[str, int] = {i[1].lower(): i[0] for i in industries}

    delete_ids = []

    for i in telegram_channels:
        if not (foreign_id := industries.get(i['section_name'].lower())):
            delete_ids.append(i['id'])
            continue
        telegram_ch = {
            'industry_id': foreign_id,
            'id': i['id'],
        }
        query = sa.text(f'UPDATE {models.TelegramChannel.__tablename__} SET industry_id=:industry_id WHERE id=:id')
        conn.execute(query.bindparams(**telegram_ch))

    session.execute(sa.delete(models.TelegramChannel).where(models.TelegramChannel.id.in_(delete_ids)))


def upgrade() -> None:
    conn = op.get_bind()
    session = sa.orm.Session(bind=conn)

    tg_data = upgrade_get_telegram_channels(conn)

    # ### commands auto generated by Alembic - please adjust! ###
    telegram_group = op.create_table('bot_telegram_group',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='id группы в базе'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Наименование группы'),
    sa.Column('display_order', sa.Integer(), server_default=sa.text('0'), nullable=False,
              comment='Порядок отображения'),
    sa.Column('is_show_all_channels', sa.Boolean(), server_default=sa.text("'false'::boolean"), nullable=False,
              comment='Указывает, показывать ли сразу все тг каналы, которые косвено связаны с данной группой'),
    sa.PrimaryKeyConstraint('id'),
    comment='Справочник групп, выделенных среди разделов по телеграм каналам'
    )

    op.create_table('bot_telegram_section',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='id раздела в базе'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Наименование раздела'),
    sa.Column('display_order', sa.Integer(), server_default=sa.text('0'), nullable=False,
              comment='Порядок отображения'),
    sa.Column('group_id', sa.Integer(), nullable=False, comment='id группы, к которой принадлежит раздел'),
    sa.ForeignKeyConstraint(['group_id'], ['bot_telegram_group.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    comment='Справочник разделов, выделенных среди телеграм каналов'
    )

    op.add_column('telegram_channel', sa.Column('section_id', sa.Integer(), nullable=True))
    op.drop_constraint('industry_id', 'telegram_channel', type_='foreignkey')
    op.create_foreign_key('section', 'telegram_channel', 'bot_telegram_section', ['section_id'], ['id'],
                          onupdate='CASCADE', ondelete='CASCADE')
    op.drop_column('telegram_channel', 'industry_id')
    # ### end Alembic commands ###

    op.bulk_insert(telegram_group, bot_telegram_group.data)
    upgrade_add_new_telegram_sections(session)
    upgrade_old_telegram_channels(session, tg_data)
    upgrade_add_new_telegram_channels(session)

    # ### change foreign_key parameters
    op.alter_column('telegram_channel', 'section_id', nullable=False)


def downgrade() -> None:
    conn = op.get_bind()
    session = sa.orm.Session(bind=conn)

    tg_data = downgrade_get_telegram_channels(conn)

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('telegram_channel', sa.Column('industry_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint('section', 'telegram_channel', type_='foreignkey')
    op.create_foreign_key('industry_id', 'telegram_channel', 'industry', ['industry_id'], ['id'],
                          onupdate='CASCADE', ondelete='CASCADE')
    op.drop_column('telegram_channel', 'section_id')

    op.drop_table('bot_telegram_section')
    op.drop_table('bot_telegram_group')
    # ### end Alembic commands ###

    downgrade_update_telegram_channel(conn, session, tg_data)

    # ### change foreign_key parameters
    op.alter_column('telegram_channel', 'industry_id', nullable=False)


