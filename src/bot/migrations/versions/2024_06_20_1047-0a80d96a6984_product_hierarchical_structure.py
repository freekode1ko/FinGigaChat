"""product hierarchical structure

Revision ID: 0a80d96a6984
Revises: 473e815e1353
Create Date: 2024-06-20 10:47:58.968100

"""
from typing import Sequence, Union

import pandas as pd
import sqlalchemy as sa
from alembic import op
from sqlalchemy.orm import Session

from constants.enums import FormatType
from migrations.data.product_hierarchical_structure import new_models, old_models, bot_product


# revision identifiers, used by Alembic.
revision: str = '0a80d96a6984'
down_revision: Union[str, None] = '473e815e1353'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade_get_old_product_groups(session: Session) -> pd.DataFrame:
    """Get old product groups"""
    data = session.execute(
        sa.select(
            old_models.ProductGroup.id,
            old_models.ProductGroup.name,
            old_models.ProductGroup.name_latin,
            old_models.ProductGroup.description,
            old_models.ProductGroup.display_order,
        )).all()
    return pd.DataFrame(data, columns=['id', 'name', 'name_latin', 'description', 'display_order'])


def upgrade_get_old_products(session: Session) -> pd.DataFrame:
    """Get old products"""
    data = session.execute(
        sa.select(
            old_models.Product.id,
            old_models.Product.name,
            old_models.Product.description,
            old_models.Product.display_order,
            old_models.Product.group_id,
        )).all()
    return pd.DataFrame(data, columns=['id', 'name', 'description', 'display_order', 'group_id'])


def upgrade_add_old_products(
        session: Session,
        product_groups: pd.DataFrame,
        products: pd.DataFrame,
) -> None:
    """Add old products"""
    # Добавляет коренвую категорию продуктов
    session.add(bot_product.root_data)

    groups_to_products_id_map = {}

    # Добавляем все группы в качестве категорий продуктов в таблицу bot_product
    for _, i in product_groups.iterrows():
        new_product = dict(
            parent_id=0,
            name=i['name'],
            name_latin=i['name_latin'],
            description=i['description'],
            display_order=i['display_order'],
            send_documents_format_type=(FormatType.group_files.value if i['name_latin'] != 'hot_offers'
                                        else FormatType.individual_messages.value),
        )
        stmt = sa.insert(new_models.Product).values(**new_product).returning(new_models.Product.id)
        new_product['id'] = session.execute(stmt).scalar_one_or_none()
        groups_to_products_id_map[i['id']] = new_product

    # Обновляем поля продуктов
    for _, i in products.iterrows():
        group = groups_to_products_id_map[i['group_id']]
        stmt = (
            sa.update(new_models.Product)
            .where(new_models.Product.id == i['id'])
            .values(
                parent_id=group['id'],
                name_latin='',
                send_documents_format_type=group['send_documents_format_type'],
            )
        )
        session.execute(stmt)


def upgrage_add_new_products(session: Session) -> None:
    """Add new products"""
    session.bulk_save_objects(bot_product.new_data)


def upgrade() -> None:
    bind = op.get_bind()
    session = Session(bind=bind)

    product_groups = upgrade_get_old_product_groups(session)
    products = upgrade_get_old_products(session)

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('bot_product', sa.Column('parent_id', sa.Integer(), nullable=True,
                                           comment='ID родительского продукта, который выступает в качестве категории продуктов'))
    op.add_column('bot_product', sa.Column('name_latin', sa.String(length=255), server_default=sa.text("''"),
                                           nullable=True, comment='Имя eng'))
    op.add_column('bot_product', sa.Column('send_documents_format_type', sa.Integer(),
                                           server_default=sa.text(str(FormatType.group_files.value)), nullable=False,
                                           comment='Формат выдачи документов'))
    op.drop_constraint('product_name_in_group', 'bot_product', type_='unique')
    op.drop_constraint('bot_product_group_id_fkey', 'bot_product', type_='foreignkey')
    op.create_foreign_key('bot_product_parent_id_fkey', 'bot_product', 'bot_product', ['parent_id'], ['id'])
    op.create_table_comment(
        'bot_product',
        'Справочник продуктов (кредит, GM, ...)',
        existing_comment='Справочник категорий продуктов (кредит, GM, ...)',
        schema=None
    )
    op.drop_column('bot_product', 'group_id')
    op.drop_table('bot_product_group')
    # ### end Alembic commands ###

    upgrade_add_old_products(session, product_groups, products)
    upgrage_add_new_products(session)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('bot_product', sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='id группы продукта'))
    op.create_table_comment(
        'bot_product',
        'Справочник категорий продуктов (кредит, GM, ...)',
        existing_comment='Справочник продуктов (кредит, GM, ...)',
        schema=None
    )
    op.drop_constraint('bot_product_parent_id_fkey', 'bot_product', type_='foreignkey')
    op.create_foreign_key('bot_product_group_id_fkey', 'bot_product', 'bot_product_group', ['group_id'], ['id'],
                          onupdate='CASCADE', ondelete='CASCADE')
    op.create_unique_constraint('product_name_in_group', 'bot_product', ['name', 'group_id'])
    op.drop_column('bot_product', 'send_documents_format_type')
    op.drop_column('bot_product', 'name_latin')
    op.drop_column('bot_product', 'parent_id')

    op.create_table('bot_product_group',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='id файла в базе'),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Имя группы'),
    sa.Column('name_latin', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Имя группы eng'),
    sa.Column('description', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=True,
              comment='Описание группы (текст меню тг)'),
    sa.Column('display_order', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False,
              comment='Порядок отображения'),
    sa.PrimaryKeyConstraint('id', name='bot_product_group_pkey'),
    sa.UniqueConstraint('name', name='group_name'),
    comment='Справочник групп продуктов (продуктовая полка, hot offers)'
    )
    # ### end Alembic commands ###
