version: "3"


services:
    database:
        image: 'postgres:latest'
        env_file:
            - .env
        command: -p ${DB_PORT}
        ports:
            - ${DB_PORT}:${DB_PORT}
        container_name: fingigachatdb
        environment:
            - TZ=Europe/Moscow
            - POSTGRES_USER=${DB_USER}
            - POSTGRES_PASSWORD=${DB_PASS}
            - POSTGRES_DB=${DB_NAME}
        volumes:
            - ./db_files/db-data/:/var/lib/postgresql/data/
              #    - ./db_files/backup.sql:/docker-entrypoint-initdb.d/init.sql
        restart: always


    article:
        build:
            context: ./src/article
            dockerfile: Dockerfile
        container_name: article_container
        environment:
            - TZ=Europe/Moscow
        env_file:
            - .env
        command: poetry run python main.py
        depends_on:
            - database
            - bot
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
            - ./sources:/code/sources/
        restart: always


    article_online:
        build:
            context: ./src/article_online
            dockerfile: Dockerfile
        container_name: article_online_container
        environment:
            - TZ=Europe/Moscow
        env_file:
            - .env
        command: poetry run python main.py
        depends_on:
            - database
            - bot
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
            - ./sources:/code/sources/
        restart: always


    bot:
        build:
            context: ./src/bot
            dockerfile: Dockerfile
        container_name: bot_container
        environment:
            - TZ=Europe/Moscow
        env_file:
            - .env
        command: bash -c "poetry run alembic upgrade head && poetry run python main.py"
        depends_on:
            - database
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
            - ./sources:/code/sources/
        restart: always


    web-app:
        build:
            context: ./src/web_app
            dockerfile: Dockerfile
        container_name: web_app_container
        environment:
            - TZ=Europe/Moscow
        env_file:
            - .env
        ports:
            - "443:443"
        command: bash -c "poetry run uvicorn --ssl-keyfile /etc/letsencrypt/live/ai-bankir-helper-dev.ru/privkey.pem --ssl-certfile /etc/letsencrypt/live/ai-bankir-helper-dev.ru/fullchain.pem app:app --host 0.0.0.0 --port 443"
        depends_on:
            - database
            - bot
        volumes:
            - ./logs:/code/logs
        restart: always


    quotes:
        build:
            context: ./src/quotes
            dockerfile: Dockerfile
        container_name: quotes_container
        environment:
            - TZ=Europe/Moscow
        env_file:
            - .env
        command: poetry run python main.py
        depends_on:
            - database
            - bot
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
            - ./sources:/code/sources/
            - /var/run/docker.sock:/var/run/docker.sock
        restart: always


    research:
        build:
            context: ./src/research
            dockerfile: Dockerfile
        container_name: research_container
        environment:
            - TZ=Europe/Moscow
        env_file:
            - .env
        command: poetry run python main.py
        depends_on:
            - database
            - bot
            - selenium_firefox
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
            - ./sources:/code/sources/
        restart: always


    users_statistics:
        build:
            context: ./src/users_statistics
            dockerfile: Dockerfile
        container_name: users_statistics_container
        environment:
            - TZ=Europe/Moscow
        env_file:
            - .env
        command: poetry run python main.py
        depends_on:
            - database
            - bot
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
            - ./sources:/code/sources/
        restart: always


    selenium_firefox:
        image: selenium/standalone-firefox:latest
        container_name: selenium_container
        shm_size: 2gb
        ports:
            - "4444:4444"
            - "7900:7900"
        environment:
            - HUB_HOST=hub
            - HUB_PORT=4444
            - NODE_MAX_INSTANCES=10
            - NODE_MAX_SESSION=10
            - SE_NODE_MAX_SESSIONS=10
            - JAVA_OPTS=-XX:ActiveProcessorCount=10
        restart: always


    parser_monitoring:
        build:
            context: ./src/parser_monitoring
        container_name: parser_monitoring_container
        environment:
            - TZ=Europe/Moscow
        env_file:
            - .env
        command: poetry run python main.py
        depends_on:
            - database
            - bot
        volumes:
            - ./logs:/code/logs
            - ./data:/code/data
            - ./sources:/code/sources/
        restart: always
