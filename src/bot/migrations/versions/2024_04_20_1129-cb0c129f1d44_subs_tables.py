"""subs_tables

Revision ID: cb0c129f1d44
Revises: f4b27e7052d3
Create Date: 2024-04-16 11:29:13.270369

"""
from typing import Sequence, Union

import pandas as pd
from alembic import op
import sqlalchemy as sa
from sqlalchemy import select, func, case, literal_column
from sqlalchemy.orm import Session

from db.models import Whitelist, IndustryAlternative, ClientAlternative, CommodityAlternative

# revision identifiers, used by Alembic.
revision: str = 'cb0c129f1d44'
down_revision: Union[str, None] = '36063d53d301'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def get_user_subscriptions_df(session: Session) -> pd.DataFrame:
    user_subs = sa.text(
        "SELECT whitelist.user_id, unnest(string_to_array(whitelist.subscriptions, ', ')) AS subscription "
        "FROM whitelist"
    ).columns(sa.Column('user_id', sa.Integer()), sa.Column('subscription', sa.Text())).cte('user_subs')

    client_name = select(
        ClientAlternative.client_id,
        func.unnest(func.string_to_array(ClientAlternative.other_names, ';')).label('other_client_name')
    ).cte('client_name')
    commodity_name = select(
        CommodityAlternative.commodity_id,
        func.unnest(func.string_to_array(CommodityAlternative.other_names, ';')).label('other_commodity_name')
    ).cte('commodity_name')
    industry_name = select(
        IndustryAlternative.industry_id,
        func.unnest(func.string_to_array(IndustryAlternative.other_names, ';')).label('other_industry_name')
    ).cte('industry_name')

    stmt = select(
        user_subs.c.user_id,
        user_subs.c.subscription,
        case(
            (client_name.c.other_client_name != None, literal_column("'client'")),
            (commodity_name.c.other_commodity_name != None, literal_column("'commodity'")),
            (industry_name.c.other_industry_name != None, literal_column("'industry'")),
            else_=literal_column("'beneficiary'")
        ).label('subject'),
        case(
            (client_name.c.other_client_name != None, client_name.c.client_id),
            (commodity_name.c.other_commodity_name != None, commodity_name.c.commodity_id),
            (industry_name.c.other_industry_name != None, industry_name.c.industry_id),
        ).label('subject_id')
    ).select_from(
        user_subs
        .outerjoin(client_name, user_subs.c.subscription == client_name.c.other_client_name)
        .outerjoin(commodity_name, user_subs.c.subscription == commodity_name.c.other_commodity_name)
        .outerjoin(industry_name, user_subs.c.subscription == industry_name.c.other_industry_name)
    )

    data = session.execute(stmt).fetchall()
    return pd.DataFrame(data, columns=['user_id', 'subscription', 'subject', 'subject_id'])


def upgrade_add_user_subscriptions_to_new_tables(
        user_df: pd.DataFrame,
        subscription_table,
        subject_name: str,
) -> None:
    user_df = user_df[user_df['subject'] == subject_name]
    data = (
        user_df[['user_id', 'subject_id']]
        .drop_duplicates()
        .rename(columns={"subject_id": f"{subject_name}_id"})
        .to_dict('records')
    )
    op.bulk_insert(subscription_table, data)


def upgrade() -> None:
    bind = op.get_bind()
    session = Session(bind=bind)

    user_df = get_user_subscriptions_df(session)

    # ### commands auto generated by Alembic - please adjust! ###
    industry_subs_table = op.create_table('user_industry_subscription',
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('industry_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['industry_id'], ['industry.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['whitelist.user_id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'industry_id'),
    comment='Справочник подписок пользователей на отрасли'
    )
    client_subs_table = op.create_table('user_client_subscription',
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['whitelist.user_id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'client_id'),
    comment='Справочник подписок пользователей на клиентов'
    )
    commodity_subs_table = op.create_table('user_commodity_subscription',
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('commodity_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['commodity_id'], ['commodity.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['whitelist.user_id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'commodity_id'),
    comment='Справочник подписок пользователей на сырьевые товары'
    )

    op.alter_column('research', column_name='news_id', new_column_name='report_id')
    op.drop_column('whitelist', 'subscriptions')
    # ### end Alembic commands ###

    upgrade_add_user_subscriptions_to_new_tables(user_df, client_subs_table, 'client')
    upgrade_add_user_subscriptions_to_new_tables(user_df, commodity_subs_table, 'commodity')
    upgrade_add_user_subscriptions_to_new_tables(user_df, industry_subs_table, 'industry')


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('whitelist', sa.Column('subscriptions', sa.Text(), server_default=sa.text("''::text")))
    op.alter_column('research', column_name='report_id', new_column_name='news_id')

    op.drop_table('user_commodity_subscription')
    op.drop_table('user_client_subscription')
    op.drop_table('user_industry_subscription')
    # ### end Alembic commands ###
